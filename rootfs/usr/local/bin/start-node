#!/usr/bin/env python
import os
import sys
import logging
import signal
import psutil
import psycopg
from contextlib import closing
from functools import partial 
from types import FrameType
from typing import Optional
from patroni.config import Config
from patroni.__main__ import Patroni
from patroni.async_executor import CriticalTask


logger = logging.getLogger(__name__)
add_data_node_sql_tpl = """
SELECT add_data_node('%s', host => '%s', database => '%s', port => '%s', if_not_exists => TRUE, bootstrap => TRUE, password => '%s');
"""
alter_data_node_sql_tpl = """
SELECT alter_data_node('%s', host => '%s', database => '%s', port => '%s', available => TRUE);
"""
create_user_mapping_tpl = """
CREATE USER MAPPING IF NOT EXISTS FOR %s SERVER "%s" OPTIONS (user '%s', password '%s');
"""
select_data_node_sql_tpl = """
select 1 from timescaledb_information.data_nodes where node_name='%s';
"""


# Looks like we are in a container, so we will act like init
def sigchld_handler(pid: int, signo: int, stack_frame: Optional[FrameType]) -> None:
    print("sigchld_handler:%s,%s" % (signo, stack_frame))
    try:
        while True:
            ret = os.waitpid(-1, os.WNOHANG)
            if ret == (0, 0):
                break
            elif ret[0] != pid:
                logger.info('Reaped pid=%s, exit status=%s', *ret)
    except OSError:
        pass


def passtochild(pid: int, signo: int, stack_frame: Optional[FrameType]):
    print("passtochild:%s,%s" % (signo, stack_frame))
    if pid:
        os.kill(pid, signo)


def start_postgresql(config):
    patroni = Patroni(config)
    if os.path.exists(patroni.postgresql.data_dir):
        patroni.postgresql.pg_ctl("-w", "start")
        return False, patroni.postgresql.is_running().pid
    else:
        is_running = patroni.postgresql.bootstrap.bootstrap(config['bootstrap'])
        if not is_running:
            return
        patroni.postgresql.bootstrap.post_bootstrap(config['bootstrap'], CriticalTask())
        return True, patroni.postgresql.is_running().pid


def run_sql_in_main_node(dbname, sql):
    host = os.environ.get("DRYCC_TIMESERIES_SERVICE_HOST")
    port = os.environ.get("DRYCC_TIMESERIES_SERVICE_PORT")
    user = os.environ.get("DRYCC_TIMESERIES_USER")
    password = os.environ.get("DRYCC_TIMESERIES_PASSWORD")
    conninfo = f"postgres://{user}:{password}@{host}:{port}/{dbname}"
    with closing(psycopg.connect(conninfo)) as conn:
        conn.autocommit = True
        return conn.execute(sql)


def add_data_node(config):
    print("Add timescaledb data node")
    name = os.environ.get("HOSTNAME")
    user = os.environ.get("DRYCC_TIMESERIES_USER")
    password = os.environ.get("DRYCC_TIMESERIES_PASSWORD")
    node, node_port = config["postgresql"]["connect_address"].split(":")
    for dbname in os.environ.get('DRYCC_TIMESERIES_INIT_NAMES').split(','):
        if data_node_exists(dbname, name):
            alter_data_node_sql = alter_data_node_sql_tpl % (name, node, dbname, node_port)
            run_sql_in_main_node(dbname, alter_data_node_sql)
        else:
            add_data_node_sql = add_data_node_sql_tpl % (name, node, dbname, node_port, password)
            create_user_mapping_sql = create_user_mapping_tpl % (user, name, user, password)
            run_sql_in_main_node(dbname, add_data_node_sql)
            run_sql_in_main_node(dbname, create_user_mapping_sql)
        print(f"Complete the registration of database {dbname}")
    print("Add timescaledb data node completed")


def alter_data_node(config):
    print("Alter timescaledb data node")
    name = os.environ.get("HOSTNAME")
    node, node_port = config["postgresql"]["connect_address"].split(":")
    for dbname in os.environ.get('DRYCC_TIMESERIES_INIT_NAMES').split(','):
        alter_data_node_sql = alter_data_node_sql_tpl % (name, node, dbname, node_port)
        run_sql_in_main_node(dbname, alter_data_node_sql)
        print(f"Complete the registration of database {dbname}")
    print("Alter timescaledb data node completed")


def data_node_exists(dbname, node_name):
    sql = select_data_node_sql_tpl % node_name
    return run_sql_in_main_node(dbname, sql).rowcount > 0


def init_signal(pid):
    signal.signal(signal.SIGCHLD, partial(sigchld_handler, pid))
    signal.signal(signal.SIGHUP, partial(passtochild, pid))
    signal.signal(signal.SIGQUIT, partial(passtochild, pid))
    signal.signal(signal.SIGUSR1, partial(passtochild, pid))
    signal.signal(signal.SIGUSR2, partial(passtochild, pid))
    signal.signal(signal.SIGINT, partial(passtochild, pid))
    signal.signal(signal.SIGABRT, partial(passtochild, pid))
    signal.signal(signal.SIGTERM, partial(passtochild, pid))


def main():
    configfile = sys.argv[1]
    config = Config(configfile)
    init, pid = start_postgresql(config)
    if init:
        add_data_node(config)
    else:
        alter_data_node(config)
    init_signal(pid)
    process = psutil.Process(pid)
    process.wait()


if __name__ == "__main__":
    main()
